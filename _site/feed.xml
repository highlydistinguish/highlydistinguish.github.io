<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-01T22:11:47+11:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Highly Distinguish</title><subtitle>Highly Distinguish pty. ltd.</subtitle><entry><title type="html">How logging system Bootstrapped in Spring Boot Application</title><link href="http://localhost:4000/blogs/tech/en/boostrap_logging_in_springbootapplication" rel="alternate" type="text/html" title="How logging system Bootstrapped in Spring Boot Application" /><published>2021-12-21T00:00:00+11:00</published><updated>2021-12-21T00:00:00+11:00</updated><id>http://localhost:4000/blogs/tech/en/Bootstrap-Logging-System-In-SpringBoot</id><content type="html" xml:base="http://localhost:4000/blogs/tech/en/boostrap_logging_in_springbootapplication"># Summary
Following diagram demonstrated the process to bootstrap and use Logback for loggings in Spring Boot applciation.

# Video version of this explanation
If you'd perfer a more intuitive and vision version, check it out below.

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Q6GY8rLnyBc&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;



# Workflow diagram

![](/assets/images/BootstrapLoggingInSpringBoot.png)

# Key steps explained
&gt; The first section for logic in SpringBoot Application domain

1. When a SpringBoot application start to execute SpringApplicaiton.run , internally it will execute `prepareEnvironment` , which will create or load application run environment , such as environment variables. 
2. SpringBoot use Observer Pattern and  SpringApplicationEvent to keep tack of each key steps in Spring Boot Application life cycle.  SpringBoot will pass loaded environments as argument to list of registered listeners. 

```java
listeners.environmentPrepared(bootstrapContext, environment);
```
3. SpringBoot's Event publisher (EventPublishingRunListener) will publish an event called **ApplicationEnvironmentPreparedEvent** via it's built-in multicast publisher.
4. **LoggingApplicationListener** is one of 6 components in Spring subscribed to ApplicationEnvironmentPreparedEvent. It will configure Spring's LoggingSystem. If the environment contains a logging.config property, it will be used to bootstrap the logging system, otherwise a default configuration is used.
5. SpringBoot will leverage Classloader to try to load any LoggingSystem or its descendants.
6. If you added sl4j into class path, LoggingSystemFactory will produce a new LogbackLoggingSystem, which extended LoggingSystem ultimately. 

```java
return new LogbackLoggingSystem(classLoader);
```
&gt; Now we move to domain of logging system in slf4j &amp; logback. 


7. LogbackLoggingSystem will invoke doConfig  of SpringBootJoranConfigurator to setup logging sub system. This Configurator is backbone of Joran framework.

&gt; Joran: a mature, flexible and powerful configuration framework. On which logback's configuration logic is based. Details check it out at Joran Configuration framework

8. **Interpreter** will parse configuration details in logback.xml , internally logback would convert elements of aforesaid xml file as a list of Event , then Interpreter has one EventPlayer to process those events one by one.e
9. **Interpreter** is Joran's main driving class. It extends SAX DefaultHandler which invokes various actions according to predefined patterns (configured as RuleStore ). It leverage Constructor to start a new instance of LogstashEncoder in memory.
10. **Joran** defines StartEvent  and EndEvent  to process beginning and ending element in XML configuration. For &lt;/encoder&gt; , Joran will use reflection to call property setter of ConsolerAppender, and inject aforesaid logstashEncoder as property encoder .
11. This is the last step of this setup. When there are logs to be wrote, the log Appender's internal encoder  (that's LogstashEncoder in this case) will be invoked to render output message.

--End--</content><author><name></name></author><category term="SpringBoot" /><category term="Java" /><category term="Logback" /><summary type="html">Summary Following diagram demonstrated the process to bootstrap and use Logback for loggings in Spring Boot applciation.</summary></entry><entry><title type="html">SQLServer Error about This driver is not configured for integrated authentication</title><link href="http://localhost:4000/blogs/tech/en/sqlserver_driver_not_configured_integrated_authenciation" rel="alternate" type="text/html" title="SQLServer Error about This driver is not configured for integrated authentication" /><published>2021-11-24T00:00:00+11:00</published><updated>2021-11-24T00:00:00+11:00</updated><id>http://localhost:4000/blogs/tech/en/Sql-server-auth-dll</id><content type="html" xml:base="http://localhost:4000/blogs/tech/en/sqlserver_driver_not_configured_integrated_authenciation"># Symptoms
When you are using integrated authentication (Kerberos connection) for MS SqlServer connection, there is one possible error :

`This driver is not configured for integrated authentication. ClientConnectionId`

and 

`no mssql-jdbc_auth-9.2.1.x64 in java.library.path:`

 `Failed to load the sqljdbc_auth.dll cause : no sqljdbc_auth in java.library.path`

## Error stack trace
The error strack trace may look like following

```bash
com.microsoft.sqlserver.jdbc.SQLServerException: This driver is not configured for integrated authentication. ClientConnectionId:f965454c-897b-4707-a625-52506e450878
    at com.microsoft.sqlserver.jdbc.SQLServerConnection.terminate(SQLServerConnection.java:3206) ~[mssql-jdbc-9.2.1.jre8.jar:na]
    at com.microsoft.sqlserver.jdbc.AuthenticationJNI.&lt;init&gt;(AuthenticationJNI.java:72) ~[mssql-jdbc-9.2.1.jre8.jar:na]
    at com.microsoft.sqlserver.jdbc.SQLServerConnection.logon(SQLServerConnection.java:4015) ~[mssql-jdbc-9.2.1.jre8.jar:na]



Caused by: java.lang.UnsatisfiedLinkError: no mssql-jdbc_auth-9.2.1.x64 in java.library.path: [C:\soft\java-11-openjdk-11.0.11.9-1.windows.redhat.x86_64\bin, C:\WINDOWS\Sun\Java\bin, C:\WINDOWS\system32, C:\WINDOWS, C:\Python39\Scripts\, C:\Python39\, C:\Program Files (x86)\RSA SecurID Token Common, C:\WINDOWS\system32, C:\WINDOWS, C:\WINDOWS\System32\Wbem, C:\WINDOWS\System32\WindowsPowerShell\v1.0\, C:\WINDOWS\System32\OpenSSH\, C:\Program Files\Git\cmd, c:\dev\scripts\, c:\dev\apache-maven-3.8.1\\bin, C:\Minikube, C:\Soft\nodejs\, C:\ProgramData\chocolatey\bin, C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\, C:\Program Files\Azure Data Studio\bin, C:\Program Files\Docker\Docker\resources\bin, C:\ProgramData\DockerDesktop\version-bin, C:\Program Files\dotnet\, C:\ProgramData\Riverbed\ProcessInjection\rpictrlBin, C:\soft\java\java-11-openjdk-11.0.11.9-1.windows.redhat.x86_64\bin, C:\Program Files (x86)\sbt\bin, C:\Program Files (x86)\scala\bin, C:\Program Files\PowerShell\7\, C:\WINDOWS\system32, C:\WINDOWS, C:\WINDOWS\System32\Wbem, C:\WINDOWS\System32\WindowsPowerShell\v1.0\, C:\WINDOWS\System32\OpenSSH\, C:\Users\XXX\AppData\Local\Microsoft\WindowsApps, C:\soft\JetBrains\IntelliJ IDEA 2021.1.3\bin, ., c:\ProgramData\chocolatey\lib\gradle\tools\gradle-7.2\\bin, C:\soft\Microsoft VS Code\bin, C:\Users\XXX\AppData\Roaming\npm, C:\Program Files\Azure Data Studio\bin, C:\soft\java-11-openjdk-11.0.11.9-1.windows.redhat.x86_64\bin, ., C:\soft\JetBrains\IntelliJ IDEA Educational Edition 2021.2.3\bin, ., C:\soft\JetBrains\IntelliJ IDEA Community Edition 2021.2.3\bin, ., .]
    at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2670) ~[na:na]
    at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:830) ~[na:na]
    at java.base/java.lang.System.loadLibrary(System.java:1873) ~[na:na]
    at com.microsoft.sqlserver.jdbc.AuthenticationJNI.&lt;clinit&gt;(AuthenticationJNI.java:51) ~[mssql-jdbc-9.2.1.jre8.jar:na]
    at com.microsoft.sqlserver.jdbc.SQLServerConnection.logon(SQLServerConnection.java:4014) ~[mssql-jdbc-9.2.1.jre8.jar:na]
    ... 46 common frames omitted



  2021-11-24 16:11:58.244  WARN 38084 --- [           main] c.m.s.jdbc.internals.AuthenticationJNI   : Failed to load the sqljdbc_auth.dll cause : no sqljdbc_auth in java.library.path: [C:\soft\java-11-openjdk-11.0.11.9-1.windows.redhat.x86_64\bin, C:\WINDOWS\Sun\Java\bin, C:\WINDOWS\system32, C:\WINDOWS, C:\Python39\Scripts\, C:\Python39\, C:\Program Files (x86)\RSA SecurID Token Common, C:\WINDOWS\system32, C:\WINDOWS, C:\WINDOWS\System32\Wbem, C:\WINDOWS\System32\WindowsPowerShell\v1.0\, C:\WINDOWS\System32\OpenSSH\, C:\Program Files\Git\cmd, c:\dev\scripts\, c:\dev\apache-maven-3.8.1\\bin, C:\Minikube, C:\Soft\nodejs\, C:\ProgramData\chocolatey\bin, C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\, C:\Program Files\Azure Data Studio\bin, C:\Program Files\Docker\Docker\resources\bin, C:\ProgramData\DockerDesktop\version-bin, C:\Program Files\dotnet\, C:\ProgramData\Riverbed\ProcessInjection\rpictrlBin, C:\soft\java\java-11-openjdk-11.0.11.9-1.windows.redhat.x86_64\bin, C:\Program Files (x86)\sbt\bin, C:\Program Files (x86)\scala\bin, C:\Program Files\PowerShell\7\, C:\WINDOWS\system32, C:\WINDOWS, C:\WINDOWS\System32\Wbem, C:\WINDOWS\System32\WindowsPowerShell\v1.0\, C:\WINDOWS\System32\OpenSSH\, C:\Users\XXX\AppData\Local\Microsoft\WindowsApps, C:\soft\JetBrains\IntelliJ IDEA 2021.1.3\bin, ., c:\ProgramData\chocolatey\lib\gradle\tools\gradle-7.2\\bin, C:\soft\Microsoft VS Code\bin, C:\Users\XXX\AppData\Roaming\npm, C:\Program Files\Azure Data Studio\bin, C:\soft\java-11-openjdk-11.0.11.9-1.windows.redhat.x86_64\bin, ., C:\soft\JetBrains\IntelliJ IDEA Educational Edition 2021.2.3\bin, ., C:\soft\JetBrains\IntelliJ IDEA Community Edition 2021.2.3\bin, ., .]

```

# Root cause
This is a  hardcode logic in Microsoft JDBC library authentication module.  Downlaoded auth file will be named as mssql-jdbc_auth-9.4.0.x64.dll, it has to renamed to sqljdbc_auth.dll and save to %JAVA_HOME%\bin folder

# Solution
 - Firstly download file from Microsoft folder as below

https://docs.microsoft.com/en-us/sql/connect/jdbc/release-notes-for-the-jdbc-driver?view=sql-server-ver15

 - Then unzip and copy the file under folder &quot;auth&quot;

 - Lastly, copy your platform dill file (e.g. mssql-jdbc_auth-9.4.0.x64.dll) and rename to sqljdbc_auth.dll


![](/assets/images/sql_server_auth.png)


--End--</content><author><name></name></author><category term="SQL Server" /><category term="Java" /><category term="Errors&amp;Solutions" /><summary type="html">Symptoms When you are using integrated authentication (Kerberos connection) for MS SqlServer connection, there is one possible error :</summary></entry><entry><title type="html">How to copy files from resources folder in jar and save to a file</title><link href="http://localhost:4000/blogs/tech/en/save_resources_to_files" rel="alternate" type="text/html" title="How to copy files from resources folder in jar and save to a file" /><published>2021-11-15T00:00:00+11:00</published><updated>2021-11-15T00:00:00+11:00</updated><id>http://localhost:4000/blogs/tech/en/How-to-save-files-from-resources-to-file</id><content type="html" xml:base="http://localhost:4000/blogs/tech/en/save_resources_to_files"># Why to extract resources from jar to local disk



# How to save resource to local  disk

Firslty let's define a class to represen the file extracted from resoruce folder

```java
import lombok.Builder;
import lombok.Data;

import java.util.Date;

@Data
@Builder
class FileInfo {
    String fileInfo;
    String fileSize;
    Date lastModified;
}

```

Then create a helper class to extract file out of resource folder and save to local disk. 
&gt; The dirty job done by ResourceLoader which is one out-of-box helper class from Springframwork

```java

import ch.qos.logback.core.util.FileUtil;
import lombok.*;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Component;
import org.springframework.util.FileCopyUtils;

import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Date;

@Component
@RequiredArgsConstructor
@Slf4j
public class KeyTabFilesHelper {


    /**
     * This final ResourceLoader + @RequiredArgsConstructor will make this loader automatically wired from Spring
     */
    private final ResourceLoader resourceLoader;


    /**
     * Extract file content from jar file's Resource folder, then save it to local disk
     * @param resourceFolder relative folder under project &quot;resource&quot; folder
     * @param resourceName resource name
     * @param destPath path of local disk the resource to be saved
     * @return A data class provide a summary of the file saved
     */
    @SneakyThrows
    public FileInfo saveAsFile(String resourceFolder, String resourceName, String destPath) {
        final val resource = resourceLoader.getResource(&quot;classpath:&quot; + resourceFolder + File.separator + resourceName);
        final val path = Paths.get(destPath, resourceName);


        if (!Files.exists(path)) {
            log.info(&quot;File NOT exist, create it and it's missing parent folder :{}&quot;, path);
            File file = new File(path.toString());
            FileUtil.createMissingParentDirectories(file);
        }

        FileCopyUtils.copy(resource.getInputStream(), new FileOutputStream(path.toFile()));

        final val fileInfo = FileInfo.builder()
                .fileInfo(path.toFile().toString())
                .fileSize(FileUtils.byteCountToDisplaySize(Files.size(path)))
                .lastModified(new Date(path.toFile().lastModified()))
                .build();

        log.info(&quot;saved file to {}, file is:{}&quot;, path, fileInfo);
        return fileInfo;
    }

}
```


# Normal approach to debug maven

Normaly if you want to debug a Java application, you can use following procedures
- Running application with mvnDebug, such as `mvnDebug spring-boot:run`
- This will open a port such as `5005`
- Then open IntelliJ, create a `remote JVM debug` , attach it to port 5005 for debug

![](/assets/images/Run_Debug_Configurations.png)

However, sometimes you'll find **your breakpoints nevet got hit**. 

# Better/Alternative way to solve this issue.

1. Open a new terminal **within Intellij** (rather than external command line window).

2. Navigate to your *project folder* where pom.xml saved

3. Run following command
```bash
mvn spring-boot:run  -D&quot;spring-boot.run.jvmArguments&quot;=&quot;-Dimport.dataset.list=importpb -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&quot;
```
After a while, you'll see following message indicate progress is listenring at designed port

```bash
[INFO] Attaching agents: []
Listening for transport dt_socket at address: 5005
```

4. Then start a new JVM debug window on port 5005, as below screenshot:

![](/assets/images/Run_Debug_Configurations.png)

5. Start debug with aforesaid debug configuration
![](/assets/images/debugIconIntelliJ.png)

6. Then you'll see breakpoint you set will be hit. As per below screenshot
![](/assets/images/BreakpointSpringBootApplication.png)


--End--</content><author><name></name></author><category term="jar" /><category term="Java" /><category term="IntelliJ" /><summary type="html">Why to extract resources from jar to local disk</summary></entry><entry><title type="html">Debug of SpringBoot run not working in IntelliJ</title><link href="http://localhost:4000/blogs/tech/en/debug_not_hit_intelliJ" rel="alternate" type="text/html" title="Debug of SpringBoot run not working in IntelliJ" /><published>2021-11-15T00:00:00+11:00</published><updated>2021-11-15T00:00:00+11:00</updated><id>http://localhost:4000/blogs/tech/en/Debug-Not-Work-Spring-Boot-Intellij</id><content type="html" xml:base="http://localhost:4000/blogs/tech/en/debug_not_hit_intelliJ"># Normal approach to debug maven

Normaly if you want to debug a Java application, you can use following procedures
- Running application with mvnDebug, such as `mvnDebug spring-boot:run`
- This will open a port such as `5005`
- Then open IntelliJ, create a `remote JVM debug` , attach it to port 5005 for debug

![](/assets/images/Run_Debug_Configurations.png)

However, sometimes you'll find **your breakpoints nevet got hit**. 

# Better/Alternative way to solve this issue.

1. Open a new terminal **within Intellij** (rather than external command line window).

2. Navigate to your *project folder* where pom.xml saved

3. Run following command
```bash
mvn spring-boot:run  -D&quot;spring-boot.run.jvmArguments&quot;=&quot;-Dimport.dataset.list=importpb -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&quot;
```
After a while, you'll see following message indicate progress is listenring at designed port

```bash
[INFO] Attaching agents: []
Listening for transport dt_socket at address: 5005
```

4. Then start a new JVM debug window on port 5005, as below screenshot:

![](/assets/images/Run_Debug_Configurations.png)

5. Start debug with aforesaid debug configuration
![](/assets/images/debugIconIntelliJ.png)

6. Then you'll see breakpoint you set will be hit. As per below screenshot
![](/assets/images/BreakpointSpringBootApplication.png)


--End--</content><author><name></name></author><category term="IntelliJ" /><category term="Java" /><category term="IntelliJ" /><summary type="html">Normal approach to debug maven</summary></entry><entry><title type="html">How to watch specific kubenetes deployment by labels</title><link href="http://localhost:4000/tech/2021/11/01/How-to-watch-kubenetes-deployment-by-label-selector.html" rel="alternate" type="text/html" title="How to watch specific kubenetes deployment by labels" /><published>2021-11-01T00:00:00+11:00</published><updated>2021-11-01T00:00:00+11:00</updated><id>http://localhost:4000/tech/2021/11/01/How-to-watch-kubenetes-deployment-by-label-selector</id><content type="html" xml:base="http://localhost:4000/tech/2021/11/01/How-to-watch-kubenetes-deployment-by-label-selector.html"># How to watch specific kubenetes deployment by labels

# Background
You can use Kubenetes Java client library to *watch* any changes in Kubenets, so that you can wire up your hook logic to call business logic upon any changes in K8s. But normally it's waste of resource and time to wathc **all** changes, so youc an apply a filter on specific resouce change by fitlering on Kube *labels*. Here is a mini blog to show how to do so.


# Check which lable to filter on

Here is screnshot from Kubenetes LENS, I'll use label *run=dummy-service* as sample. As highlight in below screenshot.

![](/assets\images\kube_labels.png)

# Sample Java logic

If the label of your deployment in Kubenetse is run=dummy-service, you can use following code logic

```java
 public void run() {
        Watch&lt;V1Deployment&gt; watch = null;
        try {
            watch = Watch.createWatch(
                    client,
                    appsApi.listNamespacedDeploymentCall(&quot;YOU_NAME_SPACE&quot;, null, null, null, null, &quot;run=dummy-service&quot;, null,
                            null, null, null, true, null),
                    new TypeToken&lt;Watch.Response&lt;V1Deployment&gt;&gt;() {
                    }.getType());
        } catch (ApiException e) {
            LOGGER.error(&quot;Error occurred in DeploymentWatcher,&quot;, e);            
        }
        assert watch != null;
        watch.forEach(this::setMetadata);
    }
```

So above code will return all Deployments with label &quot;run=dummy-service&quot;

# Reference
 - https://appdoc.app/artifact/io.kubernetes/client-java-api/0.1/io/kubernetes/client/apis/AppsV1beta1Api.html#listNamespacedDeploymentCall-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.Integer-java.lang.Boolean-io.kubernetes.client.ProgressResponseBody.ProgressListener-io.kubernetes.client.ProgressRequestBody.ProgressRequestListener-

--End--</content><author><name></name></author><category term="tech" /><category term="Kubenetes" /><category term="K8s" /><summary type="html">How to watch specific kubenetes deployment by labels</summary></entry><entry><title type="html">Day-Day-Up-Java</title><link href="http://localhost:4000/tech/2021/10/11/Day-Day-Up-Java.html" rel="alternate" type="text/html" title="Day-Day-Up-Java" /><published>2021-10-11T00:00:00+11:00</published><updated>2021-10-11T00:00:00+11:00</updated><id>http://localhost:4000/tech/2021/10/11/Day-Day-Up-Java</id><content type="html" xml:base="http://localhost:4000/tech/2021/10/11/Day-Day-Up-Java.html"># More developer friendly Threa Sleep

Besides calling Thread.sleep(30000) indicate sleep 30 seconds, but is it too confusing to count how many zeros there? 
Alternatively you can use `TimeUnit` To increase readability, I believe you'll gree following one is easier to understand for non obvious durations :
```java
TimeUnit.SECONDS.sleep(30); // sleep 30 seconds
```












 

--End--</content><author><name></name></author><category term="tech" /><category term="Java" /><category term="Tips" /><summary type="html">More developer friendly Threa Sleep</summary></entry><entry><title type="html">Failed to talk to github.com from corporation network</title><link href="http://localhost:4000/tech/2021/10/11/Could-not-resolve-github-host.html" rel="alternate" type="text/html" title="Failed to talk to github.com from corporation network" /><published>2021-10-11T00:00:00+11:00</published><updated>2021-10-11T00:00:00+11:00</updated><id>http://localhost:4000/tech/2021/10/11/Could-not-resolve-github-host</id><content type="html" xml:base="http://localhost:4000/tech/2021/10/11/Could-not-resolve-github-host.html"># Background
It's typical to get various network connection issues when you run commands within corporation network. For example, you'll find diversed issues when you trying to fetch/push about your repository host in github.com.

here is a short-and-sweet page to illustrate on how to sort it out by yourself.

# Errors

## Could not resolve host: github.com

### Symptom 
```bash
git push
fatal: unable to access 'https://github.com/your_repo/repo1.git/': Could not resolve host: github.com
```
This is emblematic `network proxy` error. 

### Solution
Depends on your running command line tool (e.g. windows prompt, gitbash, cmder, etc.) you can run following command prior to your git command
```bash
export http_proxy=http://your-company-proxy.com:8080/;
```
or 

```bash
set http_proxy=http://your-company-proxy.com:8080/;
```





## Authentication failed for: https://github.com/your_repo
### Symptom
```bash
git push
remote: Invalid username or password.
fatal: Authentication failed for 'https://github.com/your_repo/repo1.git/'
```

### Solution
#### Summary
This is related to your personal API token. So got to https://github.com/settings/tokens check your token status, whether it's expired. 

![](/assets/images/github_proxy.png)


- If it's expried, go to genearate a new one via https://github.com/settings/tokens/new 

&gt; If this is for your personal usage, you can chose &quot;No expiration&quot; in dropdown in new token page.

- Copy your newly geneated personal access token, then rerun your command in command console
- You'll get a pop up window to ask for your new token. Paste it here as below screenshot

![](/assets/images/github_input_token.png)

 - Check running status in your command console, it shoud working fine now.
 - Grab a coffee and enjoy it. :coffee: :joy:

# Reference
 - https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token

--End--</content><author><name></name></author><category term="tech" /><category term="KsqlDB" /><category term="Kafka" /><summary type="html">Background It’s typical to get various network connection issues when you run commands within corporation network. For example, you’ll find diversed issues when you trying to fetch/push about your repository host in github.com.</summary></entry><entry><title type="html">How to user fire extinguisher</title><link href="http://localhost:4000/business/2021/10/08/How-to-user-fire-extinguisher.html" rel="alternate" type="text/html" title="How to user fire extinguisher" /><published>2021-10-08T00:00:00+11:00</published><updated>2021-10-08T00:00:00+11:00</updated><id>http://localhost:4000/business/2021/10/08/How-to-user-fire-extinguisher</id><content type="html" xml:base="http://localhost:4000/business/2021/10/08/How-to-user-fire-extinguisher.html"># Summary
As you know, staff and your safety is paramount. So what if emergency take place, such as fire in office, how to help yourself and your colleagues by knowing how to use fire extinguisher correctly. Here is a short introduction.

## Rule No.1 Keep calm and don't panic
Have a breath and don't try to do silly things, e.g. jump out of window or rush out of office which surrounded by fire already.

## How to use Fire Extinguisher

![](/assets/images/pass_stamp-3.png)

When using a fire extinguisher, remember one word `PASS`, that's accronym of following 4 steps:

 1. Pull the pin. Test in small short bursts away from fire
 1. Aim at the base of the fire
 1. Squeeze the trigger
 1. Sweep across the base of the fire

&gt; You may need to use a fire extinguisher to clear an egress path.

Lastly and most importantly rule:

Only use a fire extinguisher if you are confident or have been trained to do so. The general rule is, **don’t try to extinguish anything larger than an office chair**.

--End--</content><author><name></name></author><category term="business" /><category term="Emergency" /><category term="OfficeSafety" /><summary type="html">Summary As you know, staff and your safety is paramount. So what if emergency take place, such as fire in office, how to help yourself and your colleagues by knowing how to use fire extinguisher correctly. Here is a short introduction.</summary></entry><entry><title type="html">Deep dive into ApplicationEvent in SpringBoot</title><link href="http://localhost:4000/tech/2021/10/07/Spring-Boot-ApplicationEvents-DeepDive.html" rel="alternate" type="text/html" title="Deep dive into ApplicationEvent in SpringBoot" /><published>2021-10-07T00:00:00+11:00</published><updated>2021-10-07T00:00:00+11:00</updated><id>http://localhost:4000/tech/2021/10/07/Spring-Boot-ApplicationEvents-DeepDive</id><content type="html" xml:base="http://localhost:4000/tech/2021/10/07/Spring-Boot-ApplicationEvents-DeepDive.html"># Summary
As you know,  there are various `event` will be sent (multicast) when a specific story taken place.

This simple blog will walk through the list of key `ApplicationEvent` when you kick start a Spring Boot applicaiton. So that you'll get an insight into how SpringBoot application bootstraped and started to serving requests.

# Key application events

## Holistic diagram view

![](/assets/images/SpringBootApplicationEvent.png)

## ApplicationStartingEvent

&gt; Event published as early as conceivably possible as soon as a SpringApplication has been started - before the Environment or ApplicationContext is available, but after the ApplicationListeners have been registered. 

This is called in SpringApplication.java 's run method.

```java
listeners.starting(bootstrapContext, this.mainApplicationClass);
```

## ApplicationEnvironmentPreparedEvent
&gt; Event published when a SpringApplication is starting up and the Environment is first available for inspection and modification.

This is triggered in SpringApplication's prepareEnvrionment method, which indica envrionment configured.

## ApplicationContextInitializedEvent
&gt; Event published when a SpringApplication is starting up and the ApplicationContext is prepared and ApplicationContextInitializers have been called but before any bean definitions are loaded.

This is triggered in SpringApplication's prepareContext method, which indicate context initialized and context inititializers are called.

## ApplicationPreparedEvent

&gt; Event published as when a SpringApplication is starting up and the ApplicationContext is fully prepared but not refreshed. The bean definitions will be loaded and the Environment is ready for use at this event.

This is called at last step of SpringApplication's prepareContext method, which indicate ApplicationContext is loaded

## ObjectMapperConfigured (optional)
&gt; This is used for MvcObjectMapper

This is come from WebMvcObjectMapperConfigurer, it's actually means HttpMessageConverter beans configured. Those used in Mvc's RequestMappingHandlerAdapter

## ServletWebServerInitializedEvent (optional)
&gt; Event to be published after the WebServer is ready. Useful for obtaining the local port of a running server.
Normally it will have been started, but listeners are free to inspect the server and stop and start it if they want to.

This is triggered in WebServerStartStopLifecycle.java#start() method, after calling underlying webserver's start method and set &quot;running&quot; flag to true.

Because WebServerStartStopLifecycle implemented SmartLifecycle, and it's autoStartup flag is true, so AbastractApplicationContext's finsihRefresh will call all lifecycleProcessoer.onRefresh(), which will invoke lifeCycle's start() method.

Ultimately this is called when SpringApplicatin to refresh(context)

## ContextRefreshedEvent
&gt; Event raised when an ApplicationContext gets initialized or refreshed.
This is thrown in AbstractApplicationContext#fresh()

```java
publishEvent(new ContextRefreshedEvent(this));
```



## ApplicationStartedEvent
&gt; Event published once the application context has been refreshed but before any application and command line runners have been called.

It then will call following one to further publish availability change event

```java
AvailabilityChangeEvent.publish(context, LivenessState.CORRECT);
```


## AvailabilityChangeEvent
It's payload is &quot;CORRECT&quot;

public enum LivenessState implements AvailabilityState {
&quot;Liveness&quot; state of the application.
An application is considered live when it's running with a correct internal state. &quot;Liveness&quot; failure means that the internal state of the application is broken and we cannot recover from it. As a result, the platform should restart the application.


After this event, SpringApplication's &quot;run&quot; method will be invoked, normally you'll call start method of your service/runner


## ApplicationReadyEvent
&gt; Event published as late as conceivably possible to indicate that the application is ready to service requests. 

Then it will invoke another event for Accepting_traffic

##  AvailabilityChangeEvent

ApplicationEvent sent when the AvailabilityState of the application changes.

When starting Spring Application, this state will be &quot;ACCEPTING_TRAFFIC&quot;

&quot;Tada!&quot; when you get this event, it means your SpringApplication started and happy to accept requests from users.

--End--</content><author><name></name></author><category term="tech" /><category term="SpringBoot" /><category term="ApplicationEvent" /><summary type="html">Summary As you know, there are various event will be sent (multicast) when a specific story taken place.</summary></entry><entry><title type="html">2021-09-22-IT-Solutions-For-Remote-Learning</title><link href="http://localhost:4000/blog_tech/business/2021/09/22/IT-Solutions-For-Remote-Learning.html" rel="alternate" type="text/html" title="2021-09-22-IT-Solutions-For-Remote-Learning" /><published>2021-09-22T00:00:00+10:00</published><updated>2021-09-22T00:00:00+10:00</updated><id>http://localhost:4000/blog_tech/business/2021/09/22/IT-Solutions-For-Remote-Learning</id><content type="html" xml:base="http://localhost:4000/blog_tech/business/2021/09/22/IT-Solutions-For-Remote-Learning.html">IT-Solutions-For-Remote-Learning.md</content><author><name></name></author><category term="business" /><summary type="html">IT-Solutions-For-Remote-Learning.md</summary></entry></feed>